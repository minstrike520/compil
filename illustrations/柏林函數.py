from math import floor

import random

def generate_seq(seed):
    random.seed(seed)
    base = list(range(256))
    random.shuffle(base)
    return base * 2  # 重複一次避免越界
 
SEQ = generate_seq(seed=15)

# 使用 Perlin 原始序列重複一次避免溢出
# SEQ = [
#   151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,
#   8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,
#   35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,
#   134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,
#   55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,
#   18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,
#   226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,
#   17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,
#   167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,
#   246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,
#   14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,
#   4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,
#   156,180
# ] * 2  # 重複一份防止超出範圍

def _blending(t):
    return t * t * t * (t * (t * 6 - 15) + 10)  # 6t^5 -15t^4 + 10t^3

# 二維插值（雙線性插值）
def lerp2d(x, y, v00, v10, v01, v11):
    sx = _blending(x)
    sy = _blending(y)
    i1 = v00 * (1 - sx) + v10 * sx
    i2 = v01 * (1 - sx) + v11 * sx
    return i1 * (1 - sy) + i2 * sy

def noise2d(x, y):
    xi, yi = floor(x) % 256, floor(y) % 256
    xf, yf = x - floor(x), y - floor(y)

    # 用 SEQ 值模擬 hash function 組出值
    v00 = SEQ[(SEQ[xi] + yi) % 256]
    v10 = SEQ[(SEQ[xi + 1] + yi) % 256]
    v01 = SEQ[(SEQ[xi] + yi + 1) % 256]
    v11 = SEQ[(SEQ[xi + 1] + yi + 1) % 256]

    return lerp2d(xf, yf, v00, v10, v01, v11)

import matplotlib.pyplot as plt
import numpy as np

grid_size = 100
data = np.zeros((grid_size, grid_size))

for y in range(grid_size):
    for x in range(grid_size):
        data[y][x] = noise2d(x * 0.1, y * 0.1)  # 調整頻率

plt.imshow(data, cmap="terrain")
plt.colorbar()
plt.title("仿 Perlin Noise 的 2D 地形")
plt.show()
